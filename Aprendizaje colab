{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Egeekle/Beginings/blob/main/Aprendizaje%20colab\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Decoradores"
      ],
      "metadata": {
        "id": "p1PhyviccwTl"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Decoradores sirven  en Python, por ejemplo, se utilizan para modificar o agregar comportamiento a una función o una clase, envolviendo la función original con una función que realiza tareas adicionales. Los decoradores pueden usarse para agregar seguridad, memoización, registro, medición de tiempo, validación de entrada y otros comportamientos útiles a una función existente.\n",
        "es una función que toma como entrada otra función y extiende o modifica su comportamiento sin cambiar su código original. Los decoradores se utilizan comúnmente en lenguajes de programación como Python, Java y C# para agregar funcionalidad adicional a una función existente sin tener que modificar su código."
      ],
      "metadata": {
        "id": "m0jDVuiJy8SH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#definiendo funcion normal\n",
        "def doble(x):\n",
        "  return 2*x"
      ],
      "metadata": {
        "id": "VtuVtbKo6hkr"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "doble(3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SK8mO7297JLc",
        "outputId": "a1f66ad0-f604-4e60-b0cd-0da2801e8a21"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "6"
            ]
          },
          "metadata": {},
          "execution_count": 63
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "doble(\"p\")"
      ],
      "metadata": {
        "id": "F0y4tDxgvsey",
        "outputId": "1625d6df-c0a8-4ab2-8d64-e25b0a6f21fc",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 36
        }
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'pp'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def marco1(funcion):\n",
        "    def func_marco1(y):\n",
        "        print(\"Inicio del Codigo\",\"Linea 1 del decorador\")\n",
        "        print(funcion(y))\n",
        "        print(\"Linea 2 decorador\")\n",
        "    return func_marco1"
      ],
      "metadata": {
        "id": "ak_DTdskvxbe"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "@marco1\n",
        "def doble(x):\n",
        "  return 2*x"
      ],
      "metadata": {
        "id": "IZML8EpBxcHE"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "doble(1/3)"
      ],
      "metadata": {
        "id": "iMJlz_xpxeCd",
        "outputId": "3100e50a-4a96-4599-a697-2da50c40f2bf",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Inicio del Codigo Linea 1 del decorador\n",
            "0.6666666666666666\n",
            "Linea 2 decorador\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#definiendo decorador\n",
        "def marco(fx):\n",
        "  def func_marco(x):\n",
        "    print(\"codigos del decorador: inicio\")\n",
        "    print(fx(x))\n",
        "    print(\"codigos del decorador: fin\")\n",
        "    #return fx(x)\n",
        "  return func_marco"
      ],
      "metadata": {
        "id": "7SOTqUr76f-8"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#ahora defino la misma funcion con decorador\n",
        "@marco\n",
        "def doble(x):\n",
        "  return 2*x"
      ],
      "metadata": {
        "id": "3acEYSFm6hoK"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "doble(4)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AWSyluLf7hPD",
        "outputId": "a320d876-a129-4067-d8b0-2ef426963cd4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "codigos del decorador: inicio\n",
            "8\n",
            "codigos del decorador: fin\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "aplicando el mismo decorador en otros casos"
      ],
      "metadata": {
        "id": "B0e47scY_8zT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#definiendo funcion normal\n",
        "def mitad(x):\n",
        "  return x/2"
      ],
      "metadata": {
        "id": "V0JWl5tVACIC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "mitad(7)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Bq_DK9PlAGtK",
        "outputId": "e5c1b0f9-751b-4af5-e7b1-b69e36faf8d5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3.5"
            ]
          },
          "metadata": {},
          "execution_count": 67
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "@marco\n",
        "def mitad(x):\n",
        "  return x/2"
      ],
      "metadata": {
        "id": "9uQU8rfdAImq"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "@marco1 \n",
        "def mitad(x):\n",
        "  return x/3"
      ],
      "metadata": {
        "id": "fcLGeH_R1F0a"
      },
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "mitad(7)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KoH8iW8NALDK",
        "outputId": "05c05e87-6a11-4466-827e-0d43efea1d46"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "codigos del decorador: inicio\n",
            "3.5\n",
            "codigos del decorador: fin\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "mitad(5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dLXlPUpjATrq",
        "outputId": "980a8248-0fa2-4d5b-b231-bbbd63f7a9ce"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "codigos del decorador: inicio\n",
            "2.5\n",
            "codigos del decorador: fin\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "aplicando decoradores"
      ],
      "metadata": {
        "id": "cq3fx3jQAfUC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "##MINE\n",
        "def detalle1(fan):\n",
        "  def fun_detalle1(b):\n",
        "    print(\"Started Program\")\n",
        "\n",
        "    print(f\"Analyse Number is {type(b)}\")\n",
        "    if type(b)==int:\n",
        "      print(f\"mITAD DEL NUM ES :{b/2}\")\n",
        "    elif type(b)==str:\n",
        "      print(f\"El largo del texto es {len(b)}\")\n",
        "    print(f\"El resultado de la funcion es: {fan(b)}\")\n",
        " \n",
        "  print(\"Finish Program\")\n",
        "  return fun_detalle1"
      ],
      "metadata": {
        "id": "rba40f-kz1RU"
      },
      "execution_count": 66,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "@detalle1\n",
        "def raiz(x):\n",
        "  return x**0.5"
      ],
      "metadata": {
        "id": "abCzeakd1RxW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "raiz(10)"
      ],
      "metadata": {
        "id": "1BQDsMtY1bcz",
        "outputId": "cd113cd2-fcaf-4301-a9cb-d6d8ac4cc3be",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Inicio del pograma\n",
            "El dato analizado es: <class 'int'>\n",
            "la mitad del numero es: 5.0\n",
            "El resultado de la funcion es: 3.1622776601683795\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def detalle(fun):\n",
        "  def fun_detalle(a):\n",
        "    print(\"Inicio del pograma\")\n",
        "\n",
        "    print(f\"El dato analizado es: {type(a)}\")\n",
        "    if type(a)==int:\n",
        "      print(f\"la mitad del numero es: {a/2}\")\n",
        "    else:\n",
        "      print(f\"El largo del texto es: {len(a)}\")  \n",
        "        \n",
        "    print(f\"El resultado de la funcion es: {fun(a)}\")\n",
        "\n",
        "  print(\"Fin del pograma\")\n",
        "  return fun_detalle"
      ],
      "metadata": {
        "id": "If7xeS4jAecC"
      },
      "execution_count": 67,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "@detalle\n",
        "def raiz(x):\n",
        "  return x**0.5"
      ],
      "metadata": {
        "id": "UOOUCbH0CJ3S"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "raiz(7)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hUbytPLVCSAR",
        "outputId": "c42d6bd4-28a7-4448-dc3e-39336606497f"
      },
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Inicio del pograma\n",
            "El dato analizado es: <class 'int'>\n",
            "la mitad del numero es: 3.5\n",
            "El resultado de la funcion es: 2.6457513110645907\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "@detalle\n",
        "def saludo(x):\n",
        "  return f\"Hola {x}\""
      ],
      "metadata": {
        "id": "1lPEYxkWCx4K",
        "outputId": "21bdfca8-f9b5-4161-9c50-9aca6a70d1ca",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fin del pograma\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "saludo(\"Sergio\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WxcQBBx4CyDR",
        "outputId": "503dfe74-7ea0-4c7b-c65b-c8e9ab0d1da2"
      },
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Inicio del pograma\n",
            "El dato analizado es: <class 'str'>\n",
            "El largo del texto es: 6\n",
            "El resultado de la funcion es: Hola Sergio\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Global y return"
      ],
      "metadata": {
        "id": "Axzc-oI9EA1C"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def cero():\n",
        "  a=0\n",
        "  print(a)\n",
        "  return a"
      ],
      "metadata": {
        "id": "ft-362aUD_dq"
      },
      "execution_count": 55,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "r = cero()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2if3ZTbPEmTR",
        "outputId": "8a56cd45-6eb5-484f-b194-79741be0c990"
      },
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def mas_1(x):\n",
        "     y = x  +1\n",
        "     return y"
      ],
      "metadata": {
        "id": "K4Ygpj-D4Cbc"
      },
      "execution_count": 69,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "b=mas_1(1)"
      ],
      "metadata": {
        "id": "hXCxisY04Vf0"
      },
      "execution_count": 71,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#a"
      ],
      "metadata": {
        "id": "zcBsnfTXEu_S"
      },
      "execution_count": 73,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def cero():\n",
        "  global a ##OBJETO GLOBAL\n",
        "  a=0\n",
        "  print(a)\n",
        "  return"
      ],
      "metadata": {
        "id": "4vNUq6OUExWi"
      },
      "execution_count": 75,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "cero()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RTyeflQpE4Kp",
        "outputId": "27591c85-87a8-414a-e42c-7b330928da7c"
      },
      "execution_count": 76,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "p1LINf1XE1za",
        "outputId": "0e4fd812-82b5-456e-ae25-5e217edb9e46"
      },
      "execution_count": 77,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {},
          "execution_count": 77
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Alias"
      ],
      "metadata": {
        "id": "D1SY5QT7dPa8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "a=[1,3,5]\n",
        "b=a"
      ],
      "metadata": {
        "id": "SglehT6ddZdk"
      },
      "execution_count": 81,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "b"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "T8MjK5h0dbFf",
        "outputId": "f7b6b4b0-1630-45b0-8705-2a878a24e219"
      },
      "execution_count": 82,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[1, 3, 5]"
            ]
          },
          "metadata": {},
          "execution_count": 82
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a.append(7)"
      ],
      "metadata": {
        "id": "HC4w5GIUdoME"
      },
      "execution_count": 83,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "b"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZUENsbuadoRO",
        "outputId": "239cca28-5d80-4507-a437-8261dd90a0cd"
      },
      "execution_count": 84,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[1, 3, 5, 7]"
            ]
          },
          "metadata": {},
          "execution_count": 84
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "generando una copia"
      ],
      "metadata": {
        "id": "BttLgNRLeINs"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "a=[1,3,5]\n",
        "b=a.copy()"
      ],
      "metadata": {
        "id": "V5ENhIoXepWU"
      },
      "execution_count": 85,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "b"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wP0Eo8CyexM0",
        "outputId": "7ce48b8f-235f-4f42-98ce-e71606585c63"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[1, 3, 5]"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a.append(7)"
      ],
      "metadata": {
        "id": "RPBHWIZ2eyCs"
      },
      "execution_count": 86,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "b"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "87bzsXmreyvU",
        "outputId": "8006221b-837a-439c-eecd-3d0800227bcb"
      },
      "execution_count": 87,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[1, 3, 5]"
            ]
          },
          "metadata": {},
          "execution_count": 87
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "50gCPdkJe1js",
        "outputId": "8d5bf5a2-a584-4654-b0f8-cbd91afde169"
      },
      "execution_count": 88,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[1, 3, 5, 7]"
            ]
          },
          "metadata": {},
          "execution_count": 88
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# datetime"
      ],
      "metadata": {
        "id": "ep3dbP_vfku9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import datetime as dt\n",
        "dt.datetime(2020,1,20) ##AÑO MES DIA HORA MINUTE"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3-hIVs3lfkLn",
        "outputId": "3412d0bf-d1e8-4ecf-a099-742144e0692f"
      },
      "execution_count": 90,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "datetime.datetime(2020, 1, 20, 0, 0)"
            ]
          },
          "metadata": {},
          "execution_count": 90
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dt.date(2022,2,28)"
      ],
      "metadata": {
        "id": "V9SBavgm7yL9",
        "outputId": "70b3128b-5d3e-4cb9-c3bf-ca934c690222",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 92,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "datetime.date(2022, 2, 28)"
            ]
          },
          "metadata": {},
          "execution_count": 92
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dt.datetime(2020,1,20)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uVIu4as5ftVE",
        "outputId": "03788df5-f571-4d6e-a8f6-051e4acc7df5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "datetime.datetime(2020, 1, 20, 0, 0)"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dt.datetime(2022,1,20).strftime(\"%Y-%m-%d-%H-%M\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 36
        },
        "id": "HsxUcL50g2TM",
        "outputId": "bd1356f4-493f-461c-fba8-e526b9e3aa51"
      },
      "execution_count": 93,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'2022-01-20-00-00'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 93
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dt.datetime.now()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kf8weVfZg5Xk",
        "outputId": "5121cf3b-f818-439a-bc35-45cd6978d589"
      },
      "execution_count": 95,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "datetime.datetime(2023, 3, 1, 2, 13, 53, 774759)"
            ]
          },
          "metadata": {},
          "execution_count": 95
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dt.datetime.now().strftime(\"%Y-%m-%d-%H-%M\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 36
        },
        "id": "UAchpeO1g6Ok",
        "outputId": "3cffa16e-8c9a-4e2d-c85d-6ff4e6ecf1fa"
      },
      "execution_count": 96,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'2023-03-01-02-13'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 96
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a = dt.datetime.now()\n",
        "a"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "h4vBaiFdjsm8",
        "outputId": "3e3be18e-21cc-4910-e2bc-0da9c11906fc"
      },
      "execution_count": 97,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "datetime.datetime(2023, 3, 1, 2, 14, 54, 817432)"
            ]
          },
          "metadata": {},
          "execution_count": 97
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "c=dt.datetime.now()\n",
        "c.strftime(\"%Y-%m-%d|%H-%M\")"
      ],
      "metadata": {
        "id": "GHO3DsiU9gGV",
        "outputId": "41af2cb5-82d9-49c8-f932-128cb581a262",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 36
        }
      },
      "execution_count": 101,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'2023-03-01|02-19'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 101
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "incremento"
      ],
      "metadata": {
        "id": "3Unzyalfjk7V"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "z = dt.timedelta(hours=-50) ##VARIACION\n",
        "z"
      ],
      "metadata": {
        "id": "ArczmpDb-WgM",
        "outputId": "2bbb9c43-2679-4785-a470-3fad2a47649b",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 106,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "datetime.timedelta(days=-3, seconds=79200)"
            ]
          },
          "metadata": {},
          "execution_count": 106
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "b = dt.timedelta(days=50) ##VARIACION\n",
        "b"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b_8An2lrjl1j",
        "outputId": "a2eb4beb-c1ca-4b5d-97f1-8451c77b5385"
      },
      "execution_count": 100,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "datetime.timedelta(days=50)"
            ]
          },
          "metadata": {},
          "execution_count": 100
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a + b"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sY-wvpWkjq4k",
        "outputId": "9d4908f7-6bf8-4270-8801-7e1704e85621"
      },
      "execution_count": 103,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "datetime.datetime(2023, 4, 20, 2, 14, 54, 817432)"
            ]
          },
          "metadata": {},
          "execution_count": 103
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "z + a "
      ],
      "metadata": {
        "id": "l8vh6h1J-ncy",
        "outputId": "b4ca1bb3-3ce7-43fa-caf7-6461b231d850",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 107,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "datetime.datetime(2023, 2, 27, 0, 14, 54, 817432)"
            ]
          },
          "metadata": {},
          "execution_count": 107
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "(z+a).strftime(\"%Y-%m-%d|%H-%M\")"
      ],
      "metadata": {
        "id": "_IO_hLjt-sM8",
        "outputId": "e42f1e31-ed35-4e20-e93c-c39ecaad5be3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 36
        }
      },
      "execution_count": 108,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'2023-02-27|00-14'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 108
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "(a+b).strftime(\"%Y-%m-%d|%H-%M\")"
      ],
      "metadata": {
        "id": "J7mojvVs-Hmw",
        "outputId": "6b727ea2-f190-48ec-9dba-2538b9f67832",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 36
        }
      },
      "execution_count": 104,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'2023-04-20|02-14'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 104
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "c = a + b\n",
        "c.strftime(\"%Y-%m-%d-%H-%M\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 36
        },
        "id": "9jqgcpD_ksaF",
        "outputId": "1152b969-74a1-4a7a-f90c-b14cb2aacd6f"
      },
      "execution_count": 109,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'2023-04-20-02-14'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 109
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "c - a"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "osKACjIck86L",
        "outputId": "94f437fd-eab0-471e-dc97-ab14add49374"
      },
      "execution_count": 110,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "datetime.timedelta(days=50)"
            ]
          },
          "metadata": {},
          "execution_count": 110
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fecha_inicio=dt.date(2023,2,28)\n",
        "fecha_fin=dt.date(2023,3,17)"
      ],
      "metadata": {
        "id": "3ab-_NEU--S0"
      },
      "execution_count": 111,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "delta_d=fecha_fin-fecha_inicio\n",
        "delta_d"
      ],
      "metadata": {
        "id": "lE7g102t_UGq",
        "outputId": "1495ef64-cb6d-431d-d529-dae30770cf1b",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 112,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "datetime.timedelta(days=17)"
            ]
          },
          "metadata": {},
          "execution_count": 112
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fecha_inicio=dt.datetime.now()\n",
        "fecha_fin=dt.datetime(2023,3,17,22,0)"
      ],
      "metadata": {
        "id": "Jhy1I8mF_gBa"
      },
      "execution_count": 113,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "delta_d=fecha_fin-fecha_inicio\n",
        "delta_d"
      ],
      "metadata": {
        "id": "Z7-K-JQi_sBL",
        "outputId": "12864fd8-d8de-4f16-8de5-ab131e5b6660",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 114,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "datetime.timedelta(days=16, seconds=70373, microseconds=534709)"
            ]
          },
          "metadata": {},
          "execution_count": 114
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# math"
      ],
      "metadata": {
        "id": "TYONxlmAnVcE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import math"
      ],
      "metadata": {
        "id": "ZiHrx41vnWh-"
      },
      "execution_count": 115,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "math.ceil(1.1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jv7omrxMnZJT",
        "outputId": "3fb5a8bd-9f09-434f-e937-92cdb35fcb83"
      },
      "execution_count": 118,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2"
            ]
          },
          "metadata": {},
          "execution_count": 118
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "math.ceil(1.9) ##redondear"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b7liVSeqnZL8",
        "outputId": "214df8f4-9853-4da8-9795-c1fb5bce614a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "math.copysign(1/3, 1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ro3bisb_n5UE",
        "outputId": "f20bb8cf-dc7a-4ecd-fb1e-63c67f081d29"
      },
      "execution_count": 117,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.3333333333333333"
            ]
          },
          "metadata": {},
          "execution_count": 117
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "math.copysign(1/3, -5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rb4HkyIFn7pz",
        "outputId": "d970cd4a-2bdd-49e6-e644-3a00064de574"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "-0.3333333333333333"
            ]
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "math.comb(3, 1) ##probabilidad conbimatoria"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nXjfJ4tUnu3N",
        "outputId": "afea2182-653b-419d-951b-e1fba66b63a4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3"
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "math.comb(4, 2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MzVEluIWnZOK",
        "outputId": "1b5039ad-cba6-429a-8c97-76e673aa316d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "6"
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "math.fabs(5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FbUQXkHunZQP",
        "outputId": "e567f29d-35f6-4b43-850a-5c612a5af4b4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "5.0"
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "math.fabs(-5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4m0qM3QQnZSS",
        "outputId": "bd365eea-dd19-40ff-8ade-2465ea51f4a6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "5.0"
            ]
          },
          "metadata": {},
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def mi_factorial(x):\n",
        "  val =1\n",
        "  for i in range(1,x+1):\n",
        "    val =val*i\n",
        "    print(f\"Iteracion {i} valor {val}={val/i} x {i}\"})\n",
        "    return val\n"
      ],
      "metadata": {
        "id": "MAOOzw1IBU-3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "math.factorial(3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "D4kOj2HPoLRy",
        "outputId": "3543edf3-4eb1-4a8a-fc8a-7ad2e45424db"
      },
      "execution_count": 119,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "6"
            ]
          },
          "metadata": {},
          "execution_count": 119
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "math.floor(1.1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-2NEx9uWoRva",
        "outputId": "81bb3307-9855-47da-f984-7dd93049308a"
      },
      "execution_count": 120,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1"
            ]
          },
          "metadata": {},
          "execution_count": 120
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "math.floor(1.9)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-b9mPoxToTDr",
        "outputId": "bb750378-22f3-4c76-b9e4-7ac4430459de"
      },
      "execution_count": 121,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1"
            ]
          },
          "metadata": {},
          "execution_count": 121
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "math.floor(2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VmGg1ktAoVZ7",
        "outputId": "ec08b9b2-afdc-467b-d173-a6392adaab97"
      },
      "execution_count": 122,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2"
            ]
          },
          "metadata": {},
          "execution_count": 122
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sum([.1, .1, .1, .1, .1, .1, .1, .1, .1, .1])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ogbPiD51owk7",
        "outputId": "4793c26d-6732-4615-88a8-6b0f8612548a"
      },
      "execution_count": 123,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9999999999999999"
            ]
          },
          "metadata": {},
          "execution_count": 123
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "math.fsum([.1, .1, .1, .1, .1, .1, .1, .1, .1, .1])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fPGLdZeKpFTz",
        "outputId": "e2a10414-2f8f-4dd8-c737-839ce84fddca"
      },
      "execution_count": 124,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1.0"
            ]
          },
          "metadata": {},
          "execution_count": 124
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "math.isqrt(49)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eKtSzMX5pUdb",
        "outputId": "f562527f-2b36-47cb-aabe-7c8dbe4ed015"
      },
      "execution_count": 125,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "7"
            ]
          },
          "metadata": {},
          "execution_count": 125
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "math.pi"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "phkQK6UGpkhk",
        "outputId": "aabc646d-8cd0-44c3-a3f0-c958aa48aeba"
      },
      "execution_count": 126,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3.141592653589793"
            ]
          },
          "metadata": {},
          "execution_count": 126
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "math.e"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7ExWclJIplRs",
        "outputId": "8ca6c148-ee25-4114-ed0f-685438b1534c"
      },
      "execution_count": 127,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2.718281828459045"
            ]
          },
          "metadata": {},
          "execution_count": 127
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "math.tau"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "faK3MSoFpmN8",
        "outputId": "9ac04fe7-4e70-4184-f963-9345fd6189ec"
      },
      "execution_count": 128,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "6.283185307179586"
            ]
          },
          "metadata": {},
          "execution_count": 128
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "math.inf"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QOxfvPcYpnK0",
        "outputId": "ea21ce4e-fdc5-4236-cb55-c18cda84d84f"
      },
      "execution_count": 129,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "inf"
            ]
          },
          "metadata": {},
          "execution_count": 129
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# random"
      ],
      "metadata": {
        "id": "sVxYfCmIp2yT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import random as r"
      ],
      "metadata": {
        "id": "g-ey4h_4p36V"
      },
      "execution_count": 130,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "r.randint(0,100)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ws7NTdSPp6Ib",
        "outputId": "476e8a39-af01-4fcc-bc36-112875d4d521"
      },
      "execution_count": 132,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "5"
            ]
          },
          "metadata": {},
          "execution_count": 132
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "l_r = []\n",
        "for i in range(0,50):\n",
        "  l_r.append(r.randint(0,100))\n",
        "l_r"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-qw9VGTEqf8c",
        "outputId": "6e0469bf-e076-4c70-bf54-f7e840590042"
      },
      "execution_count": 134,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[50,\n",
              " 20,\n",
              " 88,\n",
              " 14,\n",
              " 6,\n",
              " 88,\n",
              " 29,\n",
              " 43,\n",
              " 71,\n",
              " 43,\n",
              " 57,\n",
              " 76,\n",
              " 89,\n",
              " 84,\n",
              " 0,\n",
              " 27,\n",
              " 75,\n",
              " 27,\n",
              " 5,\n",
              " 67,\n",
              " 68,\n",
              " 73,\n",
              " 26,\n",
              " 54,\n",
              " 15,\n",
              " 96,\n",
              " 88,\n",
              " 78,\n",
              " 18,\n",
              " 78,\n",
              " 90,\n",
              " 79,\n",
              " 23,\n",
              " 74,\n",
              " 2,\n",
              " 1,\n",
              " 79,\n",
              " 69,\n",
              " 63,\n",
              " 78,\n",
              " 65,\n",
              " 0,\n",
              " 35,\n",
              " 29,\n",
              " 18,\n",
              " 95,\n",
              " 20,\n",
              " 9,\n",
              " 15,\n",
              " 9]"
            ]
          },
          "metadata": {},
          "execution_count": 134
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "muestra = r.sample(l_r, 15)\n",
        "muestra"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ec-goj4mq2fT",
        "outputId": "051883be-86c8-4c6c-a421-455b00f0e803"
      },
      "execution_count": 139,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[73, 27, 1, 68, 88, 79, 88, 29, 20, 84, 0, 65, 54, 63, 23]"
            ]
          },
          "metadata": {},
          "execution_count": 139
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Graficos en pandas"
      ],
      "metadata": {
        "id": "iTUC-pnCrKYc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd"
      ],
      "metadata": {
        "id": "8UHtS64qrNpl"
      },
      "execution_count": 167,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "s_muestra = pd.Series(muestra) # Crea serie\n",
        "s_muestra"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YXeJBoO8rHFC",
        "outputId": "60242564-ff1f-4ddb-d0cf-2dcd05117303"
      },
      "execution_count": 140,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0     73\n",
              "1     27\n",
              "2      1\n",
              "3     68\n",
              "4     88\n",
              "5     79\n",
              "6     88\n",
              "7     29\n",
              "8     20\n",
              "9     84\n",
              "10     0\n",
              "11    65\n",
              "12    54\n",
              "13    63\n",
              "14    23\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 140
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s_muestra.plot(kind='hist')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "LRqSis3ZrRSU",
        "outputId": "8f4f035e-c11d-45e1-a056-06f41026eaeb"
      },
      "execution_count": 141,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<AxesSubplot:ylabel='Frequency'>"
            ]
          },
          "metadata": {},
          "execution_count": 141
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s_muestra.plot(kind='box')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "6--uo4GZrfqk",
        "outputId": "02c35b3d-615b-46a8-f66e-25455eb8fbca"
      },
      "execution_count": 142,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<AxesSubplot:>"
            ]
          },
          "metadata": {},
          "execution_count": 142
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s_muestra.plot()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "x0qEyzKhtJNK",
        "outputId": "1cc16302-41a8-4449-be61-5e3c8fb93cd2"
      },
      "execution_count": 143,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<AxesSubplot:>"
            ]
          },
          "metadata": {},
          "execution_count": 143
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Numeros en numpy"
      ],
      "metadata": {
        "id": "C0NOgCzosOlj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np"
      ],
      "metadata": {
        "id": "08G53l9VsS4r"
      },
      "execution_count": 144,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "mu = 0 \n",
        "sigma = 1\n",
        "norm = np.random.normal(mu, sigma, 500)\n",
        "norm"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "or4ERNansN6c",
        "outputId": "864a7af2-6224-4b91-d14d-6c4cfefaf0a8"
      },
      "execution_count": 149,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([-0.3878357 , -1.60528827, -0.23165165,  0.28861801, -0.66286434,\n",
              "       -0.40335231, -0.64377675,  2.24365132,  1.38386808,  1.30514159,\n",
              "       -0.24666251, -0.52804037,  1.35212236,  0.05202905, -0.51788684,\n",
              "       -1.9615675 , -0.68777635,  1.68766005, -1.76783726, -0.99010223,\n",
              "        0.59966107, -0.81067478,  0.78115005,  1.63313532,  0.17486612,\n",
              "       -1.30354004,  2.36978438, -1.18387583, -0.32256153, -1.46081631,\n",
              "       -0.8437456 ,  1.57850927,  0.74355762,  1.75445369,  0.51917009,\n",
              "       -1.39816723, -0.35372722,  2.49143106, -1.12457435, -0.19958828,\n",
              "       -0.56364546,  0.31360105,  0.24851633, -0.19122401,  1.6437589 ,\n",
              "       -0.10378759, -0.4569371 ,  2.70580272,  0.80769464, -0.28124807,\n",
              "        1.54133008,  0.09889886,  0.48777457, -1.08854686,  0.39153136,\n",
              "        0.95503986,  0.35351279, -0.29116393, -0.05100794,  0.36252467,\n",
              "        0.48950301, -0.50933631,  0.07783064, -0.12372029,  1.80078143,\n",
              "        1.07725381, -0.0585435 ,  0.3574242 ,  0.04333559,  0.61841153,\n",
              "       -1.67127188,  0.37528791,  0.74355932, -2.03728257, -1.12376457,\n",
              "        0.01402437, -0.51222489,  0.6380747 ,  0.14052535,  0.56785531,\n",
              "       -0.57481899, -0.05817168,  0.48017665,  0.04430309,  0.80162087,\n",
              "        0.97086959, -0.0590969 ,  0.08413219,  0.70137454, -0.94880115,\n",
              "        0.01882134, -1.36062107, -1.38218628, -1.11452836,  0.22537735,\n",
              "        1.80929882,  0.45687941,  1.59599796, -1.4402031 , -0.82229137,\n",
              "       -0.74659972,  0.88886687,  0.41346867,  1.62047265, -0.27036461,\n",
              "       -0.21112653, -0.62755023, -0.18225148,  1.21136241, -0.50617511,\n",
              "        0.44483324,  0.69583924, -1.21053283, -0.41133378, -0.49762658,\n",
              "        0.1912174 , -0.20094336,  0.83384451,  0.74300631, -0.14901103,\n",
              "       -1.35812359,  0.64695807,  0.79916595, -0.34279416, -0.74040517,\n",
              "       -1.30544549, -0.36701344,  1.62528914,  0.1569145 ,  2.38366587,\n",
              "       -0.38467152, -1.02698942,  1.0784347 ,  0.35744109, -0.27910759,\n",
              "       -0.04126087,  1.74746367,  0.77235925, -0.49426977, -0.5102506 ,\n",
              "        0.01877982, -0.79496157,  0.73072271,  0.81536859, -0.49622396,\n",
              "        0.46432935, -0.36155166, -1.00992814,  0.16630003,  0.0190675 ,\n",
              "       -0.19845806, -0.27608683,  1.19538105,  1.35448276,  0.33221405,\n",
              "       -0.22510562,  1.29615126,  0.50892349, -0.44732105,  0.56820424,\n",
              "        1.35805279, -0.15208951, -0.84416891,  0.99744768, -0.50311659,\n",
              "        0.18704302, -1.32132274, -0.00631863,  0.4121636 , -0.0758012 ,\n",
              "       -0.28903169, -0.78670813,  0.87030727, -1.3302686 , -2.23420562,\n",
              "       -1.43020815,  1.0014309 , -0.89061433,  0.06951024, -1.53047315,\n",
              "        0.16245751, -1.2188633 , -0.69441273,  0.3109404 , -0.46684705,\n",
              "       -1.90322702,  0.34307576,  0.10216028,  0.36595131, -0.47033484,\n",
              "        0.82960439,  1.86465358,  0.63366942,  2.51716435,  0.23146739,\n",
              "       -0.83380949, -1.66317626,  0.86329011, -1.35903808, -0.59683739,\n",
              "        0.26212148, -1.72719198,  1.15546684, -0.71687469,  0.6440659 ,\n",
              "       -1.26301564,  1.13183678, -1.63175367,  0.30138083, -0.24065718,\n",
              "       -0.63533385,  1.17395146, -0.86326372,  0.77850421,  0.65158766,\n",
              "       -0.27552981,  1.98957231,  1.93830181,  0.2713423 , -0.27795389,\n",
              "        0.24750648, -1.94810867, -0.59758655, -0.55928191,  1.30901043,\n",
              "       -0.93796499, -0.1790646 , -0.66945639, -0.76231598, -1.95451134,\n",
              "       -0.57496927,  1.77676475,  0.39071544,  0.2889359 ,  0.17564672,\n",
              "       -0.46572807, -0.46386015, -0.1781891 , -1.14680625,  0.51378294,\n",
              "        0.09050822, -0.80922518,  0.71204221,  0.92158462,  0.16884212,\n",
              "       -0.41261026, -0.14714112, -0.44329822, -1.89122587, -0.62387478,\n",
              "       -0.29984204,  0.27243834, -0.57651929,  0.1115147 ,  1.68438392,\n",
              "       -0.24974784,  1.27703225, -0.62403712, -0.85054481, -0.15009088,\n",
              "        1.16594109,  2.21418058,  1.40780122,  0.21864805,  1.33007212,\n",
              "       -0.70468155,  0.64702706,  0.80506207, -0.73760498,  0.94366767,\n",
              "        0.70133768, -0.11175952, -0.53350137,  0.71377076,  0.35201138,\n",
              "       -2.11795058, -0.18447626,  1.45502929,  1.31834011, -0.00404153,\n",
              "       -0.13802931, -0.83000945,  0.54368459, -1.04981938, -0.7150846 ,\n",
              "        0.96936893,  1.8251424 , -0.59649258,  0.4374602 , -0.30703841,\n",
              "       -0.16215082,  1.34285935,  1.77399999, -0.66785649,  0.56648164,\n",
              "       -0.88582296, -0.6313556 ,  1.05708122, -0.68013242, -0.5142456 ,\n",
              "       -0.50468315, -0.02929812, -1.3582431 ,  0.84187019,  0.83975448,\n",
              "        0.56153159, -0.70328139,  1.86738168, -0.03990515,  1.18276321,\n",
              "       -0.15386568, -1.3819768 , -0.7225015 ,  0.53302986, -1.08085382,\n",
              "        1.49788095, -0.9219629 ,  0.12177925, -1.50220435, -0.43404274,\n",
              "        0.95112156, -0.88205613, -0.89937904, -0.5783231 ,  0.9693987 ,\n",
              "       -0.60810721,  0.93975033, -2.04373681,  0.515443  , -0.17230322,\n",
              "       -0.18891612, -0.35395514, -1.05850578,  2.13089203, -0.54940432,\n",
              "        0.2515735 ,  1.09515939,  0.52556951,  0.59845297, -1.45022854,\n",
              "       -1.01734623,  1.33738442, -0.0274868 ,  0.69801466, -1.93468992,\n",
              "        1.61192384,  0.73338312,  0.17010164, -1.60840489, -1.40600864,\n",
              "       -0.90804213,  0.17846066,  0.15501867, -0.41914912, -1.15943724,\n",
              "        0.1362188 ,  1.12547396, -0.89142581, -0.6695346 ,  0.99232947,\n",
              "        0.81003653,  0.45811682,  0.18725606,  0.3303335 , -0.2349996 ,\n",
              "       -0.55143925,  0.31809649,  0.72702771, -0.47646881,  1.08586736,\n",
              "        0.3478669 , -1.39377616,  1.40674838, -0.88425222, -1.01275783,\n",
              "       -0.62510143, -1.94081731, -0.47696912,  0.45333877,  1.00885865,\n",
              "       -0.66832491,  0.51310818,  1.56049728, -1.16099961, -0.26611872,\n",
              "        0.75593753,  0.64155146, -0.89715925, -1.01450974, -0.11489108,\n",
              "       -0.86798656, -0.8642777 ,  1.45092951, -0.31339743,  0.03317223,\n",
              "        0.68652993, -0.14959119, -0.6985033 , -1.95856685, -0.83727197,\n",
              "        0.551008  ,  0.43695087, -0.45148324,  0.02548783, -0.61244865,\n",
              "        0.62475476,  1.35401475,  1.94048864,  0.57913009, -0.89498408,\n",
              "       -1.42718828, -0.83123114, -2.07344936, -0.29014506,  0.90835073,\n",
              "       -1.89744742,  1.7156721 , -0.88029692, -0.23379534, -0.45214591,\n",
              "        0.55844805,  1.5737564 ,  0.63650574, -1.40419793,  1.28342539,\n",
              "       -0.62664357,  1.40198559, -0.91512689, -1.46232064,  1.03562157,\n",
              "        0.00519625, -0.12486714,  0.16660758, -1.35348144, -0.17792985,\n",
              "        0.76425596,  1.7688184 ,  0.07456489, -0.14444288,  0.90904851,\n",
              "       -0.61986627,  0.84463037,  1.1758693 ,  0.2070421 , -1.22101495,\n",
              "       -0.35423258, -0.10797167,  0.09262748,  0.12177841,  0.46909172,\n",
              "        0.59918272,  0.84709441, -0.08139355,  0.09694532, -0.47226288,\n",
              "       -0.99767328,  1.18530089,  1.09705401, -1.83198516,  0.07812157,\n",
              "        1.36741773, -0.49371852,  1.51430478,  1.96647545,  2.10312335,\n",
              "        0.25937983,  0.67680925,  1.1325991 ,  0.56042572, -0.32725611,\n",
              "        0.99036849,  0.89024909,  0.36953687,  0.65118082,  0.39967705,\n",
              "        0.12599591,  2.92378838, -0.57661164,  1.12375162,  0.38971347,\n",
              "        1.32817363,  0.67890783, -2.05733287,  0.32672315,  1.50426375,\n",
              "        0.75910189, -0.93160038,  0.94279516, -0.42373067,  1.03076347,\n",
              "        2.07710731, -1.47760791, -1.22668969,  0.48885849, -0.45682896,\n",
              "        1.20765348,  0.43501699, -0.601631  ,  0.30690126,  1.20282074])"
            ]
          },
          "metadata": {},
          "execution_count": 149
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s_norm = pd.Series(norm)\n",
        "s_norm"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GyrMFRsnsiT7",
        "outputId": "603779bd-9da5-4acc-a939-a2b26600f1b2"
      },
      "execution_count": 150,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0     -0.387836\n",
              "1     -1.605288\n",
              "2     -0.231652\n",
              "3      0.288618\n",
              "4     -0.662864\n",
              "         ...   \n",
              "495    1.207653\n",
              "496    0.435017\n",
              "497   -0.601631\n",
              "498    0.306901\n",
              "499    1.202821\n",
              "Length: 500, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 150
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s_norm.plot(kind='hist')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "pIAvy79ks0Ij",
        "outputId": "963331a8-5198-4239-d914-dfadcbde145f"
      },
      "execution_count": 151,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<AxesSubplot:ylabel='Frequency'>"
            ]
          },
          "metadata": {},
          "execution_count": 151
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s_norm.plot(kind='box')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "m3EjF4wls1ZK",
        "outputId": "a9b0b15d-fae6-47dc-d44c-aae923ed09d6"
      },
      "execution_count": 152,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<AxesSubplot:>"
            ]
          },
          "metadata": {},
          "execution_count": 152
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s_norm.plot()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "NgIb_cfutFfT",
        "outputId": "680c64c3-c29b-46dc-8ce3-1023cf3ee800"
      },
      "execution_count": 154,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<AxesSubplot:>"
            ]
          },
          "metadata": {},
          "execution_count": 154
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s_norm.describe()"
      ],
      "metadata": {
        "id": "kHFRiHa5D-kz",
        "outputId": "4a971371-8101-4d73-cc14-26625c71280e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 157,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count    500.000000\n",
              "mean       0.058790\n",
              "std        0.981710\n",
              "min       -2.234206\n",
              "25%       -0.623915\n",
              "50%        0.029330\n",
              "75%        0.735789\n",
              "max        2.923788\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 157
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s_norm.cumsum()"
      ],
      "metadata": {
        "id": "Csbh43pHETnO",
        "outputId": "10919c51-206b-4bc7-9d0a-9de8c2b08c62",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 158,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0      -0.387836\n",
              "1      -1.993124\n",
              "2      -2.224776\n",
              "3      -1.936158\n",
              "4      -2.599022\n",
              "         ...    \n",
              "495    28.051985\n",
              "496    28.487002\n",
              "497    27.885371\n",
              "498    28.192273\n",
              "499    29.395093\n",
              "Length: 500, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 158
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s_norm.cumsum().plot()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "X94S0PQ7tPdq",
        "outputId": "0d24d474-019b-4cee-83de-bf94331d9a5b"
      },
      "execution_count": 153,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<AxesSubplot:>"
            ]
          },
          "metadata": {},
          "execution_count": 153
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Aplication\n"
      ],
      "metadata": {
        "id": "75gRxj5mE3WY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "##aplication \n",
        "\n",
        "inicio = dt.datetime.now()\n",
        "fin  = dt.datetime.now()\n"
      ],
      "metadata": {
        "id": "1u16luSAElQs"
      },
      "execution_count": 161,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "fin - inicio"
      ],
      "metadata": {
        "id": "WDEWgk95FGmF",
        "outputId": "3cd7d394-7c7b-4fcd-ac77-87adbff41890",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 162,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "datetime.timedelta(microseconds=97)"
            ]
          },
          "metadata": {},
          "execution_count": 162
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data =[]\n",
        "for i in range(0,500000):\n",
        "  data.append(r.randint(0,100))"
      ],
      "metadata": {
        "id": "Q1qi40OpFP9e"
      },
      "execution_count": 166,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "data = pd.Series(data)\n",
        "data.describe()"
      ],
      "metadata": {
        "id": "SfHScAK8FeaY",
        "outputId": "b9b17e41-a2e8-4390-a068-c0b8e9dedc98",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 189,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count    500000.000000\n",
              "mean         49.935566\n",
              "std          29.133590\n",
              "min           0.000000\n",
              "25%          25.000000\n",
              "50%          50.000000\n",
              "75%          75.000000\n",
              "max         100.000000\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 189
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "mm=r.sample(data.tolist(), 15)"
      ],
      "metadata": {
        "id": "Xq_e-ICbGsy3"
      },
      "execution_count": 191,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "pd.Series(mm).mean()"
      ],
      "metadata": {
        "id": "60r7xhtfG0DF",
        "outputId": "09a7491a-27e7-4209-f6e2-f13a4ec61fff",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 190,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "49.2"
            ]
          },
          "metadata": {},
          "execution_count": 190
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "est_media(data)"
      ],
      "metadata": {
        "id": "hieKYrkUF_4Y",
        "outputId": "ccb03474-c64c-4599-d6a3-bdd5d569e3d7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 172,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "49.935566\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def tiempos(funcion):\n",
        "   def func_marco(x):\n",
        "        inicio = dt.datetime.now()\n",
        "        print(inicio)\n",
        "        funcion(x)\n",
        "        fin  = dt.datetime.now()\n",
        "        print(fin)\n",
        "        print(fin - inicio)\n",
        "        return func_marco"
      ],
      "metadata": {
        "id": "ba7wRvzqI08J"
      },
      "execution_count": 183,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "@tiempos\n",
        "def est_media(a):\n",
        "  lista_c=[]\n",
        "  lista_m=[]\n",
        "  cont = 1 \n",
        "  key = True\n",
        "  while key :\n",
        "    mm=r.sample(data.tolist(), cont)\n",
        "    m_i=pd.Series(mm).mean()\n",
        "    bool_i = math.fabs(m_i - 50) < 0.1\n",
        "   \n",
        "    lista_c.append(cont)\n",
        "\n",
        "    lista_m.append(cont)\n",
        "\n",
        "    if bool_i:\n",
        "      key =False\n",
        "      cont = 1 +1 \n",
        "    df = pd.DataFrame({'ITERACIONES':lista_c,'promedios': lista_m })\n",
        "  return df"
      ],
      "metadata": {
        "id": "JaSvfEN0F1Ke"
      },
      "execution_count": 184,
      "outputs": []
    }
  ]
}